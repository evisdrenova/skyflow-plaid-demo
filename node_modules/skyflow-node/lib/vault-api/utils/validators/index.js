"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateConnectionConfig = exports.isValidURL = exports.validateGetByIdInput = exports.validateDetokenizeInput = exports.validateInsertRecords = void 0;
const SkyflowError_1 = __importDefault(require("../../libs/SkyflowError"));
const common_1 = require("../common");
const constants_1 = __importDefault(require("../constants"));
const validateInsertRecords = (recordObj) => {
    if (!('records' in recordObj)) {
        throw new SkyflowError_1.default(constants_1.default.RECORDS_KEY_NOT_FOUND, [], true);
    }
    const { records } = recordObj;
    if (records.length === 0) {
        throw new SkyflowError_1.default(constants_1.default.EMPTY_RECORDS, [], true);
    }
    records.forEach((record, index) => {
        if (!('table' in record && 'fields' in record)) {
            throw new SkyflowError_1.default(constants_1.default.EMPTY_TABLE_AND_FIELDS, [`${index}`], true);
        }
        if (record.table === '') {
            throw new SkyflowError_1.default(constants_1.default.EMPTY_TABLE, [`${index}`], true);
        }
    });
};
exports.validateInsertRecords = validateInsertRecords;
const validateDetokenizeInput = (detokenizeInput) => {
    if (!Object.prototype.hasOwnProperty.call(detokenizeInput, 'records'))
        throw new SkyflowError_1.default(constants_1.default.MISSING_RECORDS);
    const { records } = detokenizeInput;
    if (records.length === 0)
        throw new SkyflowError_1.default(constants_1.default.EMPTY_RECORDS);
    records.forEach((record) => {
        if (Object.keys(record).length === 0) {
            throw new SkyflowError_1.default(constants_1.default.EMPTY_RECORDS);
        }
        const recordToken = record.token;
        if (!recordToken) {
            throw new SkyflowError_1.default(constants_1.default.MISSING_TOKEN);
        }
        if (recordToken === '' || typeof recordToken !== 'string') {
            throw new SkyflowError_1.default(constants_1.default.INVALID_TOKEN_ID);
        }
    });
};
exports.validateDetokenizeInput = validateDetokenizeInput;
const validateGetByIdInput = (getByIdInput) => {
    if (!Object.prototype.hasOwnProperty.call(getByIdInput, 'records')) {
        throw new SkyflowError_1.default(constants_1.default.MISSING_RECORDS);
    }
    const { records } = getByIdInput;
    if (records.length === 0) {
        throw new SkyflowError_1.default(constants_1.default.EMPTY_RECORDS);
    }
    records.forEach((record) => {
        if (Object.keys(record).length === 0) {
            throw new SkyflowError_1.default(constants_1.default.EMPTY_RECORDS);
        }
        const recordIds = record.ids;
        if (!recordIds) {
            throw new SkyflowError_1.default(constants_1.default.MISSING_IDS);
        }
        if (recordIds.length === 0)
            throw new SkyflowError_1.default(constants_1.default.EMPTY_RECORD_IDS);
        recordIds.forEach((skyflowId) => {
            if (typeof skyflowId !== 'string')
                throw new SkyflowError_1.default(constants_1.default.INVALID_RECORD_ID_TYPE);
        });
        const recordRedaction = record.redaction;
        if (!recordRedaction)
            throw new SkyflowError_1.default(constants_1.default.MISSING_REDACTION);
        if (!Object.values(common_1.RedactionType).includes(recordRedaction)) {
            throw new SkyflowError_1.default(constants_1.default.INVALID_REDACTION_TYPE);
        }
        const recordTable = record.table;
        if (!Object.prototype.hasOwnProperty.call(record, 'table')) {
            throw new SkyflowError_1.default(constants_1.default.MISSING_TABLE);
        }
        if (recordTable === '' || typeof recordTable !== 'string') {
            throw new SkyflowError_1.default(constants_1.default.INVALID_RECORD_TABLE_VALUE);
        }
    });
};
exports.validateGetByIdInput = validateGetByIdInput;
const isValidURL = (url) => {
    if (url.substring(0, 5).toLowerCase() !== 'https') {
        return false;
    }
    try {
        const tempUrl = new URL(url);
        if (tempUrl)
            return true;
    }
    catch (err) {
        return false;
    }
    return true;
};
exports.isValidURL = isValidURL;
const validateConnectionConfig = (config) => {
    if (!Object.prototype.hasOwnProperty.call(config, 'connectionURL')) {
        throw new SkyflowError_1.default(constants_1.default.MISSING_CONNECTION_URL);
    }
    if (typeof config.connectionURL !== 'string') {
        throw new SkyflowError_1.default(constants_1.default.INVALID_CONNECTION_URL_TYPE);
    }
    if (!(0, exports.isValidURL)(config.connectionURL)) {
        throw new SkyflowError_1.default(constants_1.default.INVALID_CONNECTION_URL);
    }
    if (!Object.prototype.hasOwnProperty.call(config, 'methodName')) {
        throw new SkyflowError_1.default(constants_1.default.MISSING_METHODNAME_KEY);
    }
    if (!Object.values(common_1.RequestMethod).includes(config.methodName)) {
        throw new SkyflowError_1.default(constants_1.default.INVALID_METHODNAME_VALUE);
    }
};
exports.validateConnectionConfig = validateConnectionConfig;
//# sourceMappingURL=index.js.map