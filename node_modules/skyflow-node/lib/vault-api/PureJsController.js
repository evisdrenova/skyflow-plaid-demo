"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _PureJsController_client, _PureJsController_context;
Object.defineProperty(exports, "__esModule", { value: true });
const validators_1 = require("./utils/validators");
const common_1 = require("./utils/common");
const logsHelper_1 = require("./utils/logsHelper");
const logs_1 = __importDefault(require("./utils/logs"));
const common_2 = require("./utils/common");
const collect_1 = require("./core/collect");
const reveal_1 = require("./core/reveal");
const helpers_1 = require("./utils/helpers");
class PureJsController {
    constructor(client, context) {
        _PureJsController_client.set(this, void 0);
        _PureJsController_context.set(this, void 0);
        __classPrivateFieldSet(this, _PureJsController_client, client, "f");
        __classPrivateFieldSet(this, _PureJsController_context, context, "f");
        (0, logsHelper_1.printLog)(logs_1.default.infoLogs.PUREJS_CONTROLLER_INITIALIZED, common_2.MessageType.LOG, __classPrivateFieldGet(this, _PureJsController_context, "f").logLevel);
    }
    detokenize(detokenizeInput) {
        return new Promise((resolve, reject) => {
            try {
                (0, logsHelper_1.printLog)(logs_1.default.infoLogs.VALIDATE_DETOKENIZE_INPUT, common_2.MessageType.LOG, __classPrivateFieldGet(this, _PureJsController_context, "f").logLevel);
                (0, validators_1.validateDetokenizeInput)(detokenizeInput);
                (0, reveal_1.fetchRecordsByTokenId)(detokenizeInput.records, __classPrivateFieldGet(this, _PureJsController_client, "f"))
                    .then((resolvedResult) => {
                    (0, logsHelper_1.printLog)(logs_1.default.infoLogs.FETCH_RECORDS_RESOLVED, common_2.MessageType.LOG, __classPrivateFieldGet(this, _PureJsController_context, "f").logLevel);
                    resolve(resolvedResult);
                }, (rejectedResult) => {
                    (0, logsHelper_1.printLog)(logs_1.default.errorLogs.FETCH_RECORDS_REJECTED, common_2.MessageType.ERROR, __classPrivateFieldGet(this, _PureJsController_context, "f").logLevel);
                    reject({ error: rejectedResult });
                });
                (0, logsHelper_1.printLog)((0, logsHelper_1.parameterizedString)(logs_1.default.infoLogs.EMIT_PURE_JS_REQUEST, common_1.PUREJS_TYPES.DETOKENIZE), common_2.MessageType.LOG, __classPrivateFieldGet(this, _PureJsController_context, "f").logLevel);
            }
            catch (e) {
                if (e instanceof Error)
                    (0, logsHelper_1.printLog)(e.message, common_2.MessageType.ERROR, __classPrivateFieldGet(this, _PureJsController_context, "f").logLevel);
                reject(e);
            }
        });
    }
    insert(records, options) {
        return new Promise((resolve, reject) => {
            try {
                (0, logsHelper_1.printLog)(logs_1.default.infoLogs.VALIDATE_RECORDS, common_2.MessageType.LOG, __classPrivateFieldGet(this, _PureJsController_context, "f").logLevel);
                (0, validators_1.validateInsertRecords)(records);
                this.insertData(records, options)
                    .then((result) => {
                    (0, logsHelper_1.printLog)(logs_1.default.infoLogs.INSERT_RECORDS_RESOLVED, common_2.MessageType.LOG, __classPrivateFieldGet(this, _PureJsController_context, "f").logLevel);
                    resolve(result);
                })
                    .catch((error) => {
                    (0, logsHelper_1.printLog)(logs_1.default.errorLogs.INSERT_RECORDS_REJECTED, common_2.MessageType.ERROR, __classPrivateFieldGet(this, _PureJsController_context, "f").logLevel);
                    reject({ error });
                });
                (0, logsHelper_1.printLog)((0, logsHelper_1.parameterizedString)(logs_1.default.infoLogs.EMIT_PURE_JS_REQUEST, common_1.PUREJS_TYPES.INSERT), common_2.MessageType.LOG, __classPrivateFieldGet(this, _PureJsController_context, "f").logLevel);
            }
            catch (e) {
                if (e instanceof Error)
                    (0, logsHelper_1.printLog)(e.message, common_2.MessageType.ERROR, __classPrivateFieldGet(this, _PureJsController_context, "f").logLevel);
                reject(e);
            }
        });
    }
    getById(getByIdInput) {
        return new Promise((resolve, reject) => {
            try {
                (0, logsHelper_1.printLog)(logs_1.default.infoLogs.VALIDATE_GET_BY_ID_INPUT, common_2.MessageType.LOG, __classPrivateFieldGet(this, _PureJsController_context, "f").logLevel);
                (0, validators_1.validateGetByIdInput)(getByIdInput);
                (0, reveal_1.fetchRecordsBySkyflowID)(getByIdInput.records, __classPrivateFieldGet(this, _PureJsController_client, "f")).then((resolvedResult) => {
                    (0, logsHelper_1.printLog)(logs_1.default.infoLogs.GET_BY_SKYFLOWID_RESOLVED, common_2.MessageType.LOG, __classPrivateFieldGet(this, _PureJsController_context, "f").logLevel);
                    resolve(resolvedResult);
                }, (rejectedResult) => {
                    (0, logsHelper_1.printLog)(logs_1.default.errorLogs.GET_BY_SKYFLOWID_REJECTED, common_2.MessageType.ERROR, __classPrivateFieldGet(this, _PureJsController_context, "f").logLevel);
                    reject({ error: rejectedResult });
                });
                (0, logsHelper_1.printLog)((0, logsHelper_1.parameterizedString)(logs_1.default.infoLogs.EMIT_PURE_JS_REQUEST, common_1.PUREJS_TYPES.GET_BY_SKYFLOWID), common_2.MessageType.LOG, __classPrivateFieldGet(this, _PureJsController_context, "f").logLevel);
            }
            catch (e) {
                if (e instanceof Error)
                    (0, logsHelper_1.printLog)(e.message, common_2.MessageType.ERROR, __classPrivateFieldGet(this, _PureJsController_context, "f").logLevel);
                reject(e);
            }
        });
    }
    invokeConnection(configuration) {
        return new Promise((resolve, reject) => {
            try {
                (0, logsHelper_1.printLog)(logs_1.default.infoLogs.VALIDATE_CONNECTION_CONFIG, common_2.MessageType.LOG, __classPrivateFieldGet(this, _PureJsController_context, "f").logLevel);
                (0, validators_1.validateConnectionConfig)(configuration);
                const config = configuration;
                const filledUrl = (0, helpers_1.fillUrlWithPathAndQueryParams)(config.connectionURL, config.pathParams, config.queryParams);
                config.connectionURL = filledUrl;
                this.sendInvokeConnectionRequest(config).then((resultResponse) => {
                    (0, logsHelper_1.printLog)(logs_1.default.infoLogs.SEND_INVOKE_CONNECTION_RESOLVED, common_2.MessageType.LOG, __classPrivateFieldGet(this, _PureJsController_context, "f").logLevel);
                    resolve(resultResponse);
                }).catch((rejectedResponse) => {
                    (0, logsHelper_1.printLog)(logs_1.default.errorLogs.SEND_INVOKE_CONNECTION_REJECTED, common_2.MessageType.ERROR, __classPrivateFieldGet(this, _PureJsController_context, "f").logLevel);
                    reject({ error: rejectedResponse });
                });
                (0, logsHelper_1.printLog)((0, logsHelper_1.parameterizedString)(logs_1.default.infoLogs.EMIT_PURE_JS_REQUEST, common_1.PUREJS_TYPES.INVOKE_CONNECTION), common_2.MessageType.LOG, __classPrivateFieldGet(this, _PureJsController_context, "f").logLevel);
            }
            catch (error) {
                if (error instanceof Error)
                    (0, logsHelper_1.printLog)(error.message, common_2.MessageType.ERROR, __classPrivateFieldGet(this, _PureJsController_context, "f").logLevel);
                reject(error);
            }
        });
    }
    insertData(records, options) {
        const requestBody = (0, collect_1.constructInsertRecordRequest)(records, options);
        return new Promise((rootResolve, rootReject) => {
            __classPrivateFieldGet(this, _PureJsController_client, "f").config.getBearerToken().then((authToken) => {
                __classPrivateFieldGet(this, _PureJsController_client, "f")
                    .request({
                    body: { records: requestBody },
                    requestMethod: 'POST',
                    url: `${__classPrivateFieldGet(this, _PureJsController_client, "f").config.vaultURL}/v1/vaults/${__classPrivateFieldGet(this, _PureJsController_client, "f").config.vaultID}`,
                    headers: {
                        Authorization: `Bearer ${authToken}`,
                    },
                })
                    .then((response) => {
                    rootResolve((0, collect_1.constructInsertRecordResponse)(response, options.tokens, records.records));
                })
                    .catch((error) => {
                    rootReject(error);
                });
            }).catch((err) => {
                rootReject(err);
            });
        });
    }
    sendInvokeConnectionRequest(config) {
        return new Promise((rootResolve, rootReject) => {
            __classPrivateFieldGet(this, _PureJsController_client, "f").config.getBearerToken().then((authToken) => {
                const invokeRequest = __classPrivateFieldGet(this, _PureJsController_client, "f").request({
                    url: config.connectionURL,
                    requestMethod: config.methodName,
                    body: config.requestBody,
                    headers: Object.assign(Object.assign({}, config.requestHeader), { 'X-Skyflow-Authorization': authToken, 'Content-Type': 'application/json' }),
                });
                invokeRequest.then((response) => {
                    rootResolve(response);
                }).catch((err) => {
                    rootReject({ errors: [err] });
                });
            }).catch((err) => {
                rootReject(err);
            });
        });
    }
}
_PureJsController_client = new WeakMap(), _PureJsController_context = new WeakMap();
exports.default = PureJsController;
//# sourceMappingURL=PureJsController.js.map