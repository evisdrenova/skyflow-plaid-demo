"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchRecordsBySkyflowID = exports.fetchRecordsByTokenId = void 0;
const SkyflowError_1 = __importDefault(require("../libs/SkyflowError"));
require("core-js/modules/es.promise.all-settled");
const formatForPureJsSuccess = (response) => {
    const currentResponseRecords = response.records;
    return currentResponseRecords.map((record) => ({ token: record.token, value: record.value }));
};
const formatForPureJsFailure = (cause, tokenId) => {
    var _a, _b;
    return (Object.assign({ token: tokenId }, new SkyflowError_1.default({
        code: (_a = cause === null || cause === void 0 ? void 0 : cause.error) === null || _a === void 0 ? void 0 : _a.code,
        description: (_b = cause === null || cause === void 0 ? void 0 : cause.error) === null || _b === void 0 ? void 0 : _b.description,
    }, [], true)));
};
const getSkyflowIdRecordsFromVault = (skyflowIdRecord, client, authToken) => {
    let paramList = '';
    skyflowIdRecord.ids.forEach((skyflowId) => {
        paramList += `skyflow_ids=${skyflowId}&`;
    });
    const vaultEndPointurl = `${client.config.vaultURL}/v1/vaults/${client.config.vaultID}/${skyflowIdRecord.table}?${paramList}redaction=${skyflowIdRecord.redaction}`;
    return client.request({
        requestMethod: 'GET',
        url: vaultEndPointurl,
        headers: {
            Authorization: `Bearer ${authToken}`,
            'Content-Type': 'application/json',
        },
    });
};
const getTokenRecordsFromVault = (token, client, authToken) => {
    const vaultEndPointurl = `${client.config.vaultURL}/v1/vaults/${client.config.vaultID}/detokenize`;
    return client.request({
        requestMethod: 'POST',
        url: vaultEndPointurl,
        headers: {
            Authorization: `Bearer ${authToken}`,
            'Content-Type': 'application/json',
        },
        body: {
            detokenizationParameters: [
                {
                    token,
                },
            ],
        },
    });
};
const fetchRecordsByTokenId = (tokenIdRecords, client) => new Promise((rootResolve, rootReject) => {
    client.config.getBearerToken().then((authToken) => {
        const vaultResponseSet = tokenIdRecords.map((tokenRecord) => new Promise((resolve) => {
            const apiResponse = [];
            getTokenRecordsFromVault(tokenRecord.token, client, authToken)
                .then((response) => {
                const fieldsData = formatForPureJsSuccess(response);
                apiResponse.push(...fieldsData);
            }, (cause) => {
                const errorData = formatForPureJsFailure(cause, tokenRecord.token);
                apiResponse.push(errorData);
            })
                .finally(() => {
                resolve(apiResponse);
            });
        }));
        Promise.allSettled(vaultResponseSet).then((resultSet) => {
            const recordsResponse = [];
            const errorResponse = [];
            resultSet.forEach((result) => {
                if (result.status === 'fulfilled') {
                    result.value.forEach((res) => {
                        if (Object.prototype.hasOwnProperty.call(res, 'error')) {
                            errorResponse.push(res);
                        }
                        else {
                            recordsResponse.push(res);
                        }
                    });
                }
            });
            if (errorResponse.length === 0) {
                rootResolve({ records: recordsResponse });
            }
            else if (recordsResponse.length === 0)
                rootReject({ errors: errorResponse });
            else
                rootReject({ records: recordsResponse, errors: errorResponse });
        });
    }).catch((err) => {
        rootReject(err);
    });
});
exports.fetchRecordsByTokenId = fetchRecordsByTokenId;
const fetchRecordsBySkyflowID = (skyflowIdRecords, client) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((rootResolve, rootReject) => {
        let vaultResponseSet;
        client.config.getBearerToken().then((authToken) => {
            vaultResponseSet = skyflowIdRecords.map((skyflowIdRecord) => new Promise((resolve, reject) => {
                getSkyflowIdRecordsFromVault(skyflowIdRecord, client, authToken)
                    .then((resolvedResult) => {
                    const response = [];
                    const recordsData = resolvedResult.records;
                    recordsData.forEach((fieldData) => {
                        const id = fieldData.fields.skyflow_id;
                        const currentRecord = {
                            fields: Object.assign({ id }, fieldData.fields),
                            table: skyflowIdRecord.table,
                        };
                        delete currentRecord.fields.skyflow_id;
                        response.push(currentRecord);
                    });
                    resolve(response);
                }, (rejectedResult) => {
                    var _a, _b;
                    let errorResponse = rejectedResult;
                    if (rejectedResult && rejectedResult.error) {
                        errorResponse = {
                            error: {
                                code: (_a = rejectedResult === null || rejectedResult === void 0 ? void 0 : rejectedResult.error) === null || _a === void 0 ? void 0 : _a.code,
                                description: (_b = rejectedResult === null || rejectedResult === void 0 ? void 0 : rejectedResult.error) === null || _b === void 0 ? void 0 : _b.description,
                            },
                            ids: skyflowIdRecord.ids,
                        };
                    }
                    reject(errorResponse);
                })
                    .catch((error) => {
                    reject(error);
                });
            }));
            Promise.allSettled(vaultResponseSet).then((resultSet) => {
                const recordsResponse = [];
                const errorsResponse = [];
                resultSet.forEach((result) => {
                    if (result.status === 'fulfilled') {
                        recordsResponse.push(...result.value);
                    }
                    else {
                        errorsResponse.push(result.reason);
                    }
                });
                if (errorsResponse.length === 0) {
                    rootResolve({ records: recordsResponse });
                }
                else if (recordsResponse.length === 0)
                    rootReject({ errors: errorsResponse });
                else
                    rootReject({ records: recordsResponse, errors: errorsResponse });
            });
        }).catch((err) => {
            rootReject(err);
        });
    });
});
exports.fetchRecordsBySkyflowID = fetchRecordsBySkyflowID;
//# sourceMappingURL=reveal.js.map