"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.constructInsertRecordResponse = exports.constructInsertRecordRequest = void 0;
const constructInsertRecordRequest = (records, options = { tokens: true }) => {
    const requestBody = [];
    if (options.tokens) {
        records.records.forEach((record, index) => {
            requestBody.push({
                method: 'POST',
                quorum: true,
                tableName: record.table,
                fields: record.fields,
            });
            requestBody.push({
                method: 'GET',
                tableName: record.table,
                ID: `$responses.${2 * index}.records.0.skyflow_id`,
                tokenization: true,
            });
        });
    }
    else {
        records.records.forEach((record) => {
            requestBody.push({
                method: 'POST',
                quorum: true,
                tableName: record.table,
                fields: record.fields,
            });
        });
    }
    return requestBody;
};
exports.constructInsertRecordRequest = constructInsertRecordRequest;
const constructInsertRecordResponse = (responseBody, tokens, records) => {
    if (tokens) {
        return {
            records: responseBody.responses
                .map((res, index) => {
                if (index % 2 !== 0) {
                    const skyflowId = responseBody.responses[index - 1].records[0].skyflow_id;
                    delete res.fields['*'];
                    return {
                        table: records[index - 1].table,
                        fields: Object.assign({ skyflow_id: skyflowId }, res.fields),
                    };
                }
                return res;
            }).filter((res, index) => index % 2 !== 0),
        };
    }
    return {
        records: responseBody.responses.map((res, index) => ({
            table: records[index].table,
            skyflow_id: res.records[0].skyflow_id,
        })),
    };
};
exports.constructInsertRecordResponse = constructInsertRecordResponse;
//# sourceMappingURL=collect.js.map